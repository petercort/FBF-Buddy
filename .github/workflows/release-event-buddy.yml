name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      
env:
  DISCORD_BOT_IMAGE_NAME: fbf-buddy-discord-bot
  BACKEND_IMAGE_NAME: fbf-buddy-backend
  RESOURCE_GROUP: peter-corp-rg
  DISCORD_BOT_CONTAINER_APP: fbf-buddy-discord-bot
  BACKEND_CONTAINER_APP: fbf-buddy-backend

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.increment-version.outputs.NEW_VERSION }}
      discord-bot-image: ${{ steps.push-discord-bot.outputs.IMAGE_ID }}
      backend-image: ${{ steps.push-backend.outputs.IMAGE_ID }}
    steps:
    - name: checkout 
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Get previous version and increment
      id: increment-version
      run: |
        # Get the latest git tag that matches a version pattern
        if PREV_VERSION=$(git describe --tags --match="[0-9]*.[0-9]*.[0-9]*" --abbrev=0 HEAD 2>/dev/null); then
          echo "Previous version: $PREV_VERSION"
        else
          PREV_VERSION="0.0.0"
          echo "No previous version found, starting from: $PREV_VERSION"
        fi
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$PREV_VERSION"
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        
        # Create new version
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version files
      run: |
        NEW_VERSION=${{ steps.increment-version.outputs.NEW_VERSION }}
        
        # Update package.json
        sed -i 's/"version": "[^"]*"/"version": "'$NEW_VERSION'"/' package.json
        
        # Update app.version
        echo "$NEW_VERSION" > app.version
        
        echo "Updated package.json and app.version to version $NEW_VERSION"
    
    - name: Commit version updates
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add package.json app.version
        git commit -m "chore: bump version to ${{ steps.increment-version.outputs.NEW_VERSION }}" || echo "No changes to commit"
        git push || echo "No changes to push"
    
    # Build Discord Bot
    - name: Build Discord Bot image
      run: |
        docker build \
          --file services/discord-bot/Dockerfile \
          --tag $DISCORD_BOT_IMAGE_NAME \
          --label "version=${{ steps.increment-version.outputs.NEW_VERSION }}" \
          --label "runnumber=${GITHUB_RUN_ID}" \
          services/discord-bot
    
    # Build Backend
    - name: Build Backend image
      run: |
        docker build \
          --file services/backend/Dockerfile \
          --tag $BACKEND_IMAGE_NAME \
          --label "version=${{ steps.increment-version.outputs.NEW_VERSION }}" \
          --label "runnumber=${GITHUB_RUN_ID}" \
          services/backend
    
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    # Push Discord Bot
    - name: Push Discord Bot image
      id: push-discord-bot
      env: 
        VERSION: ${{ steps.increment-version.outputs.NEW_VERSION }}
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$DISCORD_BOT_IMAGE_NAME
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
        docker tag $DISCORD_BOT_IMAGE_NAME $IMAGE_ID:$VERSION
        docker tag $DISCORD_BOT_IMAGE_NAME $IMAGE_ID:latest
        docker push $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:latest

    # Push Backend
    - name: Push Backend image
      id: push-backend
      env: 
        VERSION: ${{ steps.increment-version.outputs.NEW_VERSION }}
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BACKEND_IMAGE_NAME
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
        docker tag $BACKEND_IMAGE_NAME $IMAGE_ID:$VERSION
        docker tag $BACKEND_IMAGE_NAME $IMAGE_ID:latest
        docker push $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:latest

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: checkout 
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    - name: Create Release
      uses: elgohr/Github-Release-Action@v5
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        title: ${{ needs.build.outputs.version }}
        tag: ${{ needs.build.outputs.version }}
        
  deploy:
    needs: [build, create-release]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Enable Managed Identity on Discord Bot
    - name: Enable Managed Identity on Discord Bot
      run: |
        az containerapp identity assign \
          --name ${{ env.DISCORD_BOT_CONTAINER_APP }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --system-assigned
        
        # Get the principal ID
        DISCORD_BOT_PRINCIPAL_ID=$(az containerapp identity show \
          --name ${{ env.DISCORD_BOT_CONTAINER_APP }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query principalId -o tsv)
        
        # Grant Key Vault access
        az keyvault set-policy \
          --name ${{ secrets.KEY_VAULT_NAME }} \
          --object-id $DISCORD_BOT_PRINCIPAL_ID \
          --secret-permissions get list
    
    # Enable Managed Identity on Backend
    - name: Enable Managed Identity on Backend
      run: |
        az containerapp identity assign \
          --name ${{ env.BACKEND_CONTAINER_APP }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --system-assigned
        
        # Get the principal ID
        BACKEND_PRINCIPAL_ID=$(az containerapp identity show \
          --name ${{ env.BACKEND_CONTAINER_APP }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query principalId -o tsv)
        
        # Grant Key Vault access
        az keyvault set-policy \
          --name ${{ secrets.KEY_VAULT_NAME }} \
          --object-id $BACKEND_PRINCIPAL_ID \
          --secret-permissions get list
    
    # Deploy Discord Bot
    - name: Deploy Discord Bot to Azure Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.DISCORD_BOT_CONTAINER_APP }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ needs.build.outputs.discord-bot-image }}:latest
        environmentVariables: |
          KEY_VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}
    
    # Deploy Backend
    - name: Deploy Backend to Azure Container App
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.BACKEND_CONTAINER_APP }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ needs.build.outputs.backend-image }}:latest
        environmentVariables: |
          KEY_VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}
          DISCORD_BOT_API_URL=http://fbf-buddy-discord-bot:3001
  
